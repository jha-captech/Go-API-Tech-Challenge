// Code generated by mockery. DO NOT EDIT.

package jfmock

import (
	mock "github.com/stretchr/testify/mock"
	models "jf.go.techchallenge/internal/models"

	repository "jf.go.techchallenge/internal/repository"
)

// Course is an autogenerated mock type for the Course type
type Course struct {
	mock.Mock
}

type Course_Expecter struct {
	mock *mock.Mock
}

func (_m *Course) EXPECT() *Course_Expecter {
	return &Course_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: course
func (_m *Course) Delete(course *models.Course) error {
	ret := _m.Called(course)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Course) error); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Course_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Course_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - course *models.Course
func (_e *Course_Expecter) Delete(course interface{}) *Course_Delete_Call {
	return &Course_Delete_Call{Call: _e.mock.On("Delete", course)}
}

func (_c *Course_Delete_Call) Run(run func(course *models.Course)) *Course_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Course))
	})
	return _c
}

func (_c *Course_Delete_Call) Return(_a0 error) *Course_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Course_Delete_Call) RunAndReturn(run func(*models.Course) error) *Course_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: filters
func (_m *Course) FindAll(filters repository.Filters) ([]models.Course, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Filters) ([]models.Course, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(repository.Filters) []models.Course); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.Filters) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Course_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type Course_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - filters repository.Filters
func (_e *Course_Expecter) FindAll(filters interface{}) *Course_FindAll_Call {
	return &Course_FindAll_Call{Call: _e.mock.On("FindAll", filters)}
}

func (_c *Course_FindAll_Call) Run(run func(filters repository.Filters)) *Course_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.Filters))
	})
	return _c
}

func (_c *Course_FindAll_Call) Return(_a0 []models.Course, _a1 error) *Course_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Course_FindAll_Call) RunAndReturn(run func(repository.Filters) ([]models.Course, error)) *Course_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: guid
func (_m *Course) FindOne(guid string) (models.Course, error) {
	ret := _m.Called(guid)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 models.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Course, error)); ok {
		return rf(guid)
	}
	if rf, ok := ret.Get(0).(func(string) models.Course); ok {
		r0 = rf(guid)
	} else {
		r0 = ret.Get(0).(models.Course)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Course_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type Course_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - guid string
func (_e *Course_Expecter) FindOne(guid interface{}) *Course_FindOne_Call {
	return &Course_FindOne_Call{Call: _e.mock.On("FindOne", guid)}
}

func (_c *Course_FindOne_Call) Run(run func(guid string)) *Course_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Course_FindOne_Call) Return(_a0 models.Course, _a1 error) *Course_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Course_FindOne_Call) RunAndReturn(run func(string) (models.Course, error)) *Course_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: course
func (_m *Course) Save(course *models.Course) error {
	ret := _m.Called(course)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Course) error); ok {
		r0 = rf(course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Course_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Course_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - course *models.Course
func (_e *Course_Expecter) Save(course interface{}) *Course_Save_Call {
	return &Course_Save_Call{Call: _e.mock.On("Save", course)}
}

func (_c *Course_Save_Call) Run(run func(course *models.Course)) *Course_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Course))
	})
	return _c
}

func (_c *Course_Save_Call) Return(_a0 error) *Course_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Course_Save_Call) RunAndReturn(run func(*models.Course) error) *Course_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewCourse creates a new instance of Course. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Course {
	mock := &Course{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
