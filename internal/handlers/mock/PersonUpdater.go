// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "go-api-tech-challenge/internal/models"
)

// PersonUpdater is an autogenerated mock type for the PersonUpdater type
type PersonUpdater struct {
	mock.Mock
}

// UpdatePerson provides a mock function with given fields: ctx, lastName, updatedPerson
func (_m *PersonUpdater) UpdatePerson(ctx context.Context, lastName string, updatedPerson models.Person) (models.Person, error) {
	ret := _m.Called(ctx, lastName, updatedPerson)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePerson")
	}

	var r0 models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Person) (models.Person, error)); ok {
		return rf(ctx, lastName, updatedPerson)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Person) models.Person); ok {
		r0 = rf(ctx, lastName, updatedPerson)
	} else {
		r0 = ret.Get(0).(models.Person)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.Person) error); ok {
		r1 = rf(ctx, lastName, updatedPerson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonUpdater creates a new instance of PersonUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonUpdater {
	mock := &PersonUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
